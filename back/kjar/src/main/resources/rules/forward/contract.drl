package rules.forward;

import com.ftn.sbnz.model.contract.Contract;
import com.ftn.sbnz.model.contract.ContractProposal;
import com.ftn.sbnz.model.contract.events.NewContractCreation;
import com.ftn.sbnz.model.packages.Packages;
import com.ftn.sbnz.model.user.Client;
import com.ftn.sbnz.model.servicearea.ServiceArea;
import com.ftn.sbnz.model.contract.service.IContractService;
import java.time.LocalDateTime;
import java.util.List;
import java.util.ArrayList;
import java.util.Collection;

global LocalDateTime timeBoundry;
global IContractService contractService;
//global Collection<NewContractCreation> contractCreations;

rule "Alert Contract Near Expiration"
when
    $contract: Contract(activeFlag == true, $client: client, $client.hasContractProposal() == false)
    not (NewContractCreation(oldContract.client == $client, creationTime.isAfter(timeBoundry)))
then
    String message = "Notification: Contract " + $contract.getPackages().getName() + " is ending in less than a month for client id=" + $client.getId();
    insert(new NewContractCreation(message, $contract, LocalDateTime.now()));
end

rule "Make Contract Proposal"
when
    $contractCreation: NewContractCreation($client: oldContract.client)
then
    System.out.println("Making contract proposal for client id= " + $client);
    contractService.createProposal($client);
end